#!/usr/bin/env python3

import http.client, json
import sys, getopt
import datetime

def main(argv):
    
    msgs = ""
    host = ""
    port = 80
    fail = False
    fails = ""
    state = "UNKNOWN"
    ok = ""
    tolerance = 5
    code = 4
   
    try:
        opts, args = getopt.getopt(argv, "H:p:t:")
        if len(opts) == 0:
            print("THIS IS JUST AN EXAMPLE AND NEEDS TO GET CHANGED FOR INDIVIDUAL USE !!!")
            print("")
            print("Check an api by a given tolerance (this is an example and needs to get changed for individual USE).")
            print("Usage: check_bonewsletter -H <HOST> -p <PORT> -t <TOLERANCE>")
            print("")
            print("  -H       Hostname or ip address")
            print("  -p       Port for the connection. (default: 80)")
            print("  -t       Tolerance in percent. (default: 5)")
            print("")
            return ;

        for opt, arg in opts:
            if opt == '-H':
                host = arg
            if opt == '-p':
                try:
                    port = int(arg)
                except:
                    port = 80
            if opt == '-t':
                try:
                    tolerance = int(arg)
                except:
                    tolerance = 5
    except:
        pass

    try:
        now = datetime.datetime.now()
        s = now.replace(hour=0, minute=0, second=0).strftime ("%Y-%m-%dT%H:%M:%SZ")
        if port == 443:
            conn = http.client.HTTPSConnection(host, port)
        else:
            conn = http.client.HTTPConnection(host, port)
        conn.request("GET","/nagios/endpoint/" + s)
        response = conn.getresponse()
        content = response.read()
        j = json.loads(content)

        if 'result' in j:
            pcnt = 1
            for v in j['result']:
                if 'percentage' in v and 'id' in v:
                    try:
                        pcnt = int(v['percentage'])
                    except:
                        pcnt = 0

                    fail = fail or not(pcnt > (100 - tolerance))
                    
                    if not(pcnt > (100 - tolerance)):
                        fails += " " + v['id'] + " (" + str(pcnt) + "%),"
                    else:
                        ok += " " + v['id'] + " (" + str(pcnt) + "%),"

            if fail:
                state = "WARNING"
                code = 1
            else:
                state = "OK"
                code = 0
        
        conn.close()

    except Exception as ex:
        state = "CRITICAL"
        code = 2
        msgs = str(ex)
        
    if len(fails) > 0:
        msgs += "Lost: " + fails[1:len(fails)-1]

    if len(ok) > 0:
        if len(msgs) > 0:
            msgs += " | "
        msgs += "Passed: " + ok[1:len(ok)-1]

    if len(msgs) == 0:
        msgs = "No newsletters today."

    print(state + " - " + msgs)
    sys.exit(code)
	

if __name__ == "__main__":
    main(sys.argv[1:])
